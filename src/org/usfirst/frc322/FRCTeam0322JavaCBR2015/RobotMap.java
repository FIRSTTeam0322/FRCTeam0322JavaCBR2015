// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc322.FRCTeam0322JavaCBR2015;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static DigitalInput autonomusModeSwitchesSwitch1;
	public static DigitalInput autonomusModeSwitchesSwitch2;
	public static DigitalInput autonomusModeSwitchesSwitch3;
	public static DigitalInput autonomusModeSwitchesSwitch4;
    public static SpeedController chassisFrontLeftMotor;
    public static SpeedController chassisRearLeftMotor;
    public static SpeedController chassisFrontRightMotor;
    public static SpeedController chassisRearRightMotor;
    public static RobotDrive chassisRobotDrive41;
    public static DigitalOutput chassisFrontLeftBrake;
    public static DigitalOutput chassisRearLeftBrake;
    public static DigitalOutput chassisFrontRightBrake;
    public static DigitalOutput chassisRearRightBrake;
    public static Gyro chassisSensorsGyro1;
    public static BuiltInAccelerometer chassisSensorsAccel1;
    public static Encoder chassisSensorsFrontLeftEncoder;
    public static Encoder chassisSensorsRearLeftEncoder;
    public static Encoder chassisSensorsFrontRightEncoder;
    public static Encoder chassisSensorsRearRightEncoder;
    public static SpeedController leftArmRotator;
    public static SpeedController rightArmRotator;
    public static SpeedController leftArmWheel;
    public static SpeedController rightArmWheel;
    public static SpeedController liftLiftMotor;
    public static CameraServer cameraServer;

    public static int DRIVENUMAXIS = 4;
    public static int DRIVENUMBUTTONS = 16;
    public static int MANIPULATORNUMAXIS = 5;
    public static int MANIPULATORNUMBUTTONS = 12;

    public static void init() {
    	autonomusModeSwitchesSwitch1 = new DigitalInput(0);
    	autonomusModeSwitchesSwitch2 = new DigitalInput(1);
    	autonomusModeSwitchesSwitch3 = new DigitalInput(2);
    	autonomusModeSwitchesSwitch4 = new DigitalInput(3);
        chassisFrontLeftMotor = new Talon(0);
        LiveWindow.addActuator("Chassis", "FrontLeftMotor", (Talon) chassisFrontLeftMotor);
        
        chassisRearLeftMotor = new Talon(1);
        LiveWindow.addActuator("Chassis", "RearLeftMotor", (Talon) chassisRearLeftMotor);
        
        chassisFrontRightMotor = new Talon(2);
        LiveWindow.addActuator("Chassis", "FrontRightMotor", (Talon) chassisFrontRightMotor);
        
        chassisRearRightMotor = new Talon(3);
        LiveWindow.addActuator("Chassis", "RearRightMotor", (Talon) chassisRearRightMotor);
        
        chassisRobotDrive41 = new RobotDrive(chassisFrontLeftMotor, chassisRearLeftMotor,
              chassisFrontRightMotor, chassisRearRightMotor);
        
        chassisRobotDrive41.setSafetyEnabled(true);
        chassisRobotDrive41.setExpiration(0.1);
        chassisRobotDrive41.setSensitivity(0.5);
        chassisRobotDrive41.setMaxOutput(1.0);
        
        chassisRobotDrive41.setInvertedMotor(MotorType.kRearLeft, false);
        chassisRobotDrive41.setInvertedMotor(MotorType.kFrontLeft, false);
        chassisRobotDrive41.setInvertedMotor(MotorType.kRearRight, true);
        chassisRobotDrive41.setInvertedMotor(MotorType.kFrontRight, true);
        
        chassisFrontLeftBrake = new DigitalOutput(12);
        chassisRearLeftBrake = new DigitalOutput(13);
        chassisFrontRightBrake = new DigitalOutput(14);
        chassisRearRightBrake = new DigitalOutput(15);

        chassisSensorsGyro1 = new Gyro(0);
        LiveWindow.addSensor("Chassis Sensors", "Gyro 1", chassisSensorsGyro1);
        chassisSensorsGyro1.setSensitivity(0.007);
        
        chassisSensorsAccel1 = new BuiltInAccelerometer();
        LiveWindow.addSensor("Chassis Sensors", "Accel 1", chassisSensorsAccel1);
        
        chassisSensorsFrontLeftEncoder = new Encoder(4, 5, false);
        LiveWindow.addSensor("Chassis Sensors", "Front Left Encoder", chassisSensorsFrontLeftEncoder);
        chassisSensorsRearLeftEncoder = new Encoder(6, 7, false);
        LiveWindow.addSensor("Chassis Sensors", "Rear Left Encoder", chassisSensorsRearLeftEncoder);
        chassisSensorsFrontRightEncoder = new Encoder(8, 9, true);
        LiveWindow.addSensor("Chassis Sensors", "Front Right Encoder", chassisSensorsFrontRightEncoder);
        chassisSensorsRearRightEncoder = new Encoder(10, 11, true);
        LiveWindow.addSensor("Chassis Sensors", "Rear Right Encoder", chassisSensorsRearRightEncoder);
        
        leftArmRotator = new Talon(4);
        LiveWindow.addActuator("LeftArm", "LeftArmRotator", (Talon) leftArmRotator);
        
        rightArmRotator = new Talon(5);
        LiveWindow.addActuator("RightArm", "RightArmRotator", (Talon) rightArmRotator);
        
        leftArmWheel = new Talon(6);
        LiveWindow.addActuator("LeftArmWheel", "LeftArmWheel", (Talon) leftArmWheel);
        
        rightArmWheel = new Talon(7);
        LiveWindow.addActuator("RightArmWheel", "RightArmWheel", (Talon) rightArmWheel);
        
        liftLiftMotor = new Victor(8);
        LiveWindow.addActuator("Lift", "LiftMotor", (Victor) liftLiftMotor);
        
        //cameraServer = CameraServer.getInstance();
        //cameraServer.setQuality(50);
        //cameraServer.startAutomaticCapture("cam0");
    }
}
